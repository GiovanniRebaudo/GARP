tinytex::parse_install(
text = "! LaTeX Error: File `type1cm.sty' not found."
)
tinytex::parse_install(
text = "! LaTeX Error: File `algorithm.sty' not found."
)
tinytex::parse_install(
text = "! LaTeX Error: File `algpseudocode.sty' not found."
)
tinytex::parse_install(
text = "LaTeX Font Warning: Font shape `U/rsfs/m/n' in size <8.5> not available"
)
tinytex::parse_install(
text = "! LaTeX Font Warning: Font shape `U/rsfs/m/n' in size <8.5> not available"
)
## Clear the workspace
rm(list = ls())
library(rstudioapi)
## Clear the workspace
rm(list = ls())
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
library("TruncatedNormal")
library("EPGLM")
## Clear the workspace
rm(list = ls())
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions.R")
library("TruncatedNormal")
library("EPGLM")
# sim data from spherical multivariate normal clusters
simdat_mult <- function(freq, dim=1, mu = c(-4, 0, 4), sigma = rep(1,3)){
y  = matrix()
Kn = length(freq)
c_truth = double()
for(c in 1:Kn){
a = sum(c(nc[1:c]))
b = sum(nc[1:(c+1)]) - 1
y[a:b, 1:dim] = rnorm(nc[c+1]*dim, mu[c], sigma[c])
c_truth[a:b, 1] = rep(c, nc[c+1])
}
return(list(y = y$V1, c_truth = c_truth))
}
# Simulate the data from multivariate spherical Gaussian mixture
freq_truth  = c(59, 71, 48)
n           = sum(freq_truth)    # sample size
Kn_truth    = length(freq_truth) # true number of components
mu_truth    = c(-4, 0, 4)        # true means
sigma_truth = rep(1, Kn_truth)   # true sigma
J           = 13
y           = simdat_mult(freq  = freq_truth,
dim   = J,
mu    = mu_truth,
sigma = sigma_truth)
# sim data from spherical multivariate normal clusters
simdat_mult <- function(freq, dim=1, mu = c(-4, 0, 4), sigma = rep(1,3)){
y  = matrix()
Kn = length(freq)
c_truth = double()
for(c in 1:Kn){
a = sum(c(freq[1:c]))
b = sum(freq[1:(c+1)]) - 1
y[a:b, 1:dim] = rnorm(freq[c+1]*dim, mu[c], sigma[c])
c_truth[a:b, 1] = rep(c, freq[c+1])
}
return(list(y = y$V1, c_truth = c_truth))
}
# Simulate the data from multivariate spherical Gaussian mixture
freq_truth  = c(59, 71, 48)
n           = sum(freq_truth)    # sample size
Kn_truth    = length(freq_truth) # true number of components
mu_truth    = c(-4, 0, 4)        # true means
sigma_truth = rep(1, Kn_truth)   # true sigma
J           = 13
y           = simdat_mult(freq  = freq_truth,
dim   = J,
mu    = mu_truth,
sigma = sigma_truth)
y  = matrix()
Kn = length(freq)
y  = matrix(nrow=n, ncol=J)
Kn = length(freq)
c_truth = double()
freq  = freq_truth
dim   = J
mu    = mu_truth
sigma = sigma_truth
y  = matrix(nrow=n, ncol=J)
Kn = length(freq)
c_truth = double()
for(c in 1:Kn){
a = sum(c(freq[1:c]))
b = sum(freq[1:(c+1)]) - 1
y[a:b, 1:dim] = rnorm(freq[c+1]*dim, mu[c], sigma[c])
c_truth[a:b, 1] = rep(c, freq[c+1])
}
# sim data from spherical multivariate normal clusters
simdat_mult <- function(freq, dim=1, mu = c(-4, 0, 4), sigma = rep(1,3)){
y  = matrix(nrow=n, ncol=J)
Kn = length(freq)
c_truth = double()
for(c in 1:Kn){
a = sum(c(freq[1:c]))
b = sum(freq[1:(c+1)]) - 1
y[a:b, 1:dim] = rnorm(freq[c+1]*dim, mu[c], sigma[c])
c_truth[a:b]  = c
}
return(list(y = y, c_truth = c_truth))
}
# Simulate the data from multivariate spherical Gaussian mixture
freq_truth  = c(59, 71, 48)
n           = sum(freq_truth)    # sample size
Kn_truth    = length(freq_truth) # true number of components
mu_truth    = c(-4, 0, 4)        # true means
sigma_truth = rep(1, Kn_truth)   # true sigma
J           = 13
y           = simdat_mult(freq  = freq_truth,
dim   = J,
mu    = mu_truth,
sigma = sigma_truth)
data        = simdat_mult(freq  = freq_truth,
dim   = J,
mu    = mu_truth,
sigma = sigma_truth)
# Simulation study multivariate ------------------------------------------------------------
set.seed(0)
# Simulate the data from multivariate spherical Gaussian mixture
freq_truth  = c(59, 71, 48)
n           = sum(freq_truth)    # sample size
Kn_truth    = length(freq_truth) # true number of components
mu_truth    = c(-4, 0, 4)        # true means
sigma_truth = rep(1, Kn_truth)   # true sigma
J           = 13
data        = simdat_mult(freq  = freq_truth,
dim   = J,
mu    = mu_truth,
sigma = sigma_truth)
y           = data$y - mean(data$y) # center the data
y           = scale(y)              # scale the data
# sim data from spherical multivariate normal clusters
simdat_mult <- function(freq, dim=1, mu = c(-4, 0, 4), sigma = rep(1,3)){
y  = matrix(nrow=n, ncol=J)
Kn = length(freq)
c_truth = double()
for(c in 1:Kn){
a = sum(c(freq[1:(c-1)]))
b = sum(freq[1:c]) - 1
y[a:b, 1:dim] = rnorm(freq[c]*dim, mu[c], sigma[c])
c_truth[a:b]  = c
}
return(list(y = y, c_truth = c_truth))
}
data        = simdat_mult(freq  = freq_truth,
dim   = J,
mu    = mu_truth,
sigma = sigma_truth)
# sim data from spherical multivariate normal clusters
simdat_mult <- function(freq, dim=1, mu = c(-4, 0, 4), sigma = rep(1,3)){
y  = matrix(nrow=n, ncol=J)
Kn = length(freq)
c_truth = double()
for(c in 1:Kn){
a = sum(c(freq[1:(c-1)]))
b = sum(freq[1:c]) - 1
y[a:b, 1:dim] = rnorm(freq[c]*dim, mu[c], sigma[c])
c_truth[a:b]  = c
}
return(list(y = y, c_truth = c_truth))
}
# Load relevant libraries, functions and data ----------------------------------
rm(list=ls())
# Set the working directory to the current folder
# Code to set the working directory to the current folder from RStudio
library(rstudioapi) # version 0.14
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(MASS)          # version 7.3-58.2
library(ggplot2)       # version 3.4.2
theme_set(theme_bw(base_size = 14))
library(viridis)       # version 0.6.2
library(salso)         # version 0.3.29
library(reshape)       # version 0.8.9
library(Cairo)         # version 1.6-0
library(scales)        # version 1.2.1
library(mvtnorm)       # version 1.1-3
library(LaplacesDemon) # version 16.1.6
# Load functions
source("GARP_fcts.R")
# Load data
y = get(load("Data.RData"))
P = ncol(y)
N = nrow(y)
# Data scatter plot (Figure 1 in the main manuscript)
Plot_1 = pre_plot(y)
# CairoPNG(filename = '../Image/Mice_Data.png', width = 500, height = 400)
Plot_1
# Gaussian edge contour plot (Figure S.1 in the supplementary materials)
Plot_S1 = edge_countorplot(vertices = rbind(c(-2,-2), c(3,3)),
data.grid =expand.grid(X = seq(-3, 4, length.out=800),
Y = seq(-3, 4, length.out=800)))
Plot_S1
# Run the MCMC ------------------------------------------------------------
# GARP hyperparameters
# Random partition parameters
p_s       = 0.5 # change to p_v
gamma_GN  = 0.5
alpha_Dir = 0.5
## NIG hyperparameters
mu0       = colMeans(y)
kappa0    = 0.001
nu0       = 100
Lambda0   = diag(rep(15,P))
# MCMC quantities
Niter     = 10000
run_MCMC  = FALSE
if(run_MCMC){
# Set the seed for reproducibility
set.seed(123)
#  pt1 = proc.time() compute time
output = GARP_MCMC(data    = data,
mu0     = mu0,
kappa0  = kappa0,
nu0     = nu0,
Lambda0 = Lambda0,
p_s     = p_s,
Niter   = Niter,
all     = TRUE,
Plot    = TRUE,
acc_p   = TRUE)
# pt2 = proc.time()
# pt2-pt1
# save(output, file="output.RData")
} else {
load("output.RData")
}
attach(output)
# Thinning
thin         = 2
burn.in      = Niter/2
seq_thin     = seq(from=burn.in, to=Niter, by=thin)
Niter_ps     = length(seq_thin)
# Assign cells to vertex/edge phases
p_s_i        = colMeans(stable_out[seq_thin,])
is_i_stable  = (p_s_i>0.5)
(N_S_map     = sum(is_i_stable))
(N_T_map     = N-N_S_map)
# Point estimate vertex-clustering
clust_VI_stable       = salso(cl_memb_all_out[seq_thin,is_i_stable], loss=VI())
uni_clust_data_stable = unique(clust_VI_stable)
# Number of vertex clusters
c_clust_data_stable       = length(uni_clust_data_stable)
# Frequencies of vertex clusters
freq_clust_VI_stable      = double(c_clust_data_stable)
for (i in 1:c_clust_data_stable){
uni_clust_stable        = uni_clust_data_stable[i]
freq_clust_VI_stable[i] = sum(clust_VI_stable==uni_clust_stable)
}
freq_clust_VI_stable
# Compute probability of co-clustering of cells assigned to vertices
dissimlar_stable = psm(cl_memb_all_out[seq_thin,is_i_stable])
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
Plot_2b = Plot_heat_vertex(dissimlar_stable = dissimlar_stable,
N_S_map          = N_S_map)
# CairoPNG(filename = '../Image/Prob_Coclus_obs_Mice_Data_Orange.png',
#          width = 500, height = 400)
Plot_2b
# Edge assignments
if(run_MCMC){
# Set the seed for reproducibility
set.seed(123)
output_edge = GARP_Edge(y                   = y,
is_i_stable         = is_i_stable,
c_clust_data_stable = c_clust_data_stable,
kappa0              = kappa0,
nu0                 = nu0,
Lambda0             = Lambda0,
Niter               = Niter,
Plot                = TRUE)
# save(output_edge, file="output_edge.RData")
} else {
load("output_edge.RData")
}
attach(output_edge)
K_T_max             = c_clust_data_stable*(c_clust_data_stable-1)/2
data_plot           = data.frame(y[is_i_stable,])
data_plot_edge      = data.frame(y[!is_i_stable,])
Segment_data           = matrix(nrow=K_T_max,ncol=4)
colnames(Segment_data) = c("x","y","xend","yend")
for(ind in 1:K_T_max){
Segment_data[ind,] = c(mu_stable_map[Map_k_edge[ind,1],1], mu_stable_map[Map_k_edge[ind,1],2],
mu_stable_map[Map_k_edge[ind,2],1], mu_stable_map[Map_k_edge[ind,2],2])
}
Seg1 = data.frame(t(Segment_data[1,]))
Seg2 = data.frame(t(Segment_data[2,]))
Seg3 = data.frame(t(Segment_data[3,]))
Seg4 = data.frame(t(Segment_data[4,]))
Seg5 = data.frame(t(Segment_data[5,]))
Seg6 = data.frame(t(Segment_data[6,]))
Alpha = table(cl_memb_edge_out[seq_thin,])
Alpha = Alpha/max(Alpha)*100
Main_phases = factor(clust_VI_stable)
Edge        = factor(apply(cl_memb_edge_out[seq_thin,],2,Mode))
all_phases               = c(Main_phases, Edge)
colnames(data_plot_edge) = c("MDS1", "MDS2")
data_plot_all            = rbind(data_plot,data_plot_edge)
levels(all_phases)       = c("1", "2", "3", "4", "(1,2)", "(2,3)", "(3,4)")
data_plot_all$phases     = all_phases
data_plot_all$Vi         = factor(c(rep(1,length(Main_phases)), rep(0,length(Edge))))
Plot = ggplot() +
geom_point(data=data_plot_all,aes(x=MDS1, y=MDS2,col=all_phases, shape = Vi))+
geom_segment(data=Seg1, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[1],size=1)+
geom_segment(data=Seg2, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[2],size=1)+
geom_segment(data=Seg3, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[3],size=1)+
geom_segment(data=Seg4, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[4],size=1)+
geom_segment(data=Seg5, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[5],size=1)+
geom_segment(data=Seg6, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[6],size=1)+
xlab("Dim 1")+ylab("Dim 2")+labs(color="Z_i", shape="V_i")+
theme_bw()+theme(legend.position = "right", text = element_text(size=20))
# CairoPNG(filename = '../Image/Inference_Scatter_Mice.png', width = 500, height = 400)
Plot
all_phases
c(Main_phases, Edge)
Edge
Main_phases
cl_memb_edge_out
sum(is.na(cl_memb_edge_out))
Mode
cl_memb_edge_out[seq_thin,]
Mode
apply(cl_memb_edge_out[seq_thin,],2,Mode)
Edge        = factor(apply(cl_memb_edge_out[seq_thin,],2,Mode))
is.na(Main_phases)
sum(is.na(Main_phases))
sum(is.na(Edge))
summary(cl_memb_edge_out)
str(cl_memb_edge_out)
str(Edge)
length(Edge)
sum(is.na(cl_memb_edge_out[seq_thin,]))
Mode
# Function to compute the mode
Mode <- function(x) {
uni_x <- unique(x)
uni_x[which.max(tabulate(match(x, uni_x)))]
}
Edge        = factor(apply(cl_memb_edge_out[seq_thin,],2,Mode))
all_phases               = c(Main_phases, Edge)
colnames(data_plot_edge) = c("MDS1", "MDS2")
data_plot_all            = rbind(data_plot,data_plot_edge)
levels(all_phases)       = c("1", "2", "3", "4", "(1,2)", "(2,3)", "(3,4)")
data_plot_all$phases     = all_phases
data_plot_all$Vi         = factor(c(rep(1,length(Main_phases)), rep(0,length(Edge))))
Plot = ggplot() +
geom_point(data=data_plot_all,aes(x=MDS1, y=MDS2,col=all_phases, shape = Vi))+
geom_segment(data=Seg1, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[1],size=1)+
geom_segment(data=Seg2, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[2],size=1)+
geom_segment(data=Seg3, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[3],size=1)+
geom_segment(data=Seg4, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[4],size=1)+
geom_segment(data=Seg5, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[5],size=1)+
geom_segment(data=Seg6, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[6],size=1)+
xlab("Dim 1")+ylab("Dim 2")+labs(color="Z_i", shape="V_i")+
theme_bw()+theme(legend.position = "right", text = element_text(size=20))
# CairoPNG(filename = '../Image/Inference_Scatter_Mice.png', width = 500, height = 400)
Plot
K_T_max             = c_clust_data_stable*(c_clust_data_stable-1)/2
data_plot           = data.frame(y[is_i_stable,])
data_plot_edge      = data.frame(y[!is_i_stable,])
Segment_data           = matrix(nrow=K_T_max,ncol=4)
colnames(Segment_data) = c("x","y","xend","yend")
for(ind in 1:K_T_max){
Segment_data[ind,] = c(mu_stable_map[Map_k_edge[ind,1],1],
mu_stable_map[Map_k_edge[ind,1],2],
mu_stable_map[Map_k_edge[ind,2],1],
mu_stable_map[Map_k_edge[ind,2],2])
}
Seg1 = data.frame(t(Segment_data[1,]))
Seg2 = data.frame(t(Segment_data[2,]))
Seg3 = data.frame(t(Segment_data[3,]))
Seg4 = data.frame(t(Segment_data[4,]))
Seg5 = data.frame(t(Segment_data[5,]))
Seg6 = data.frame(t(Segment_data[6,]))
Alpha = table(cl_memb_edge_out[seq_thin,])
Alpha = Alpha/max(Alpha)*100
Main_phases = factor(clust_VI_stable)
Edge        = factor(apply(cl_memb_edge_out[seq_thin,],2,Mode))
all_phases               = c(Main_phases, Edge)
colnames(data_plot_edge) = c("MDS1", "MDS2")
data_plot_all            = rbind(data_plot,data_plot_edge)
levels(all_phases)       = c("1", "2", "3", "4", "(1,2)", "(2,3)", "(3,4)")
data_plot_all$phases     = all_phases
data_plot_all$Vi         = factor(c(rep(1,length(Main_phases)), rep(0,length(Edge))))
Plot = ggplot() +
geom_point(data=data_plot_all,aes(x=MDS1, y=MDS2,col=all_phases, shape = Vi))+
geom_segment(data=Seg1, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[1],size=1)+
geom_segment(data=Seg2, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[2],size=1)+
geom_segment(data=Seg3, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[3],size=1)+
geom_segment(data=Seg4, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[4],size=1)+
geom_segment(data=Seg5, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[5],size=1)+
geom_segment(data=Seg6, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[6],size=1)+
xlab("Dim 1")+ylab("Dim 2")+labs(color="Z_i", shape="V_i")+
theme_bw()+theme(legend.position = "right", text = element_text(size=20))
# CairoPNG(filename = '../Image/Inference_Scatter_Mice.png', width = 500, height = 400)
Plot
factor(apply(cl_memb_edge_out[seq_thin,],2,Mode))
all_phases               = c(Main_phases, Edge)
all_phases
Main_phases         = factor(clust_VI_stable)
Edge                = factor(apply(cl_memb_edge_out[seq_thin,],2,Mode))
levels(Main_phases)  = c("1", "2", "3", "4")
levels(Edge)  = c("(1,2)", "(2,3)", "(3,4)")
all_phases               = c(Main_phases, Edge)
colnames(data_plot_edge) = c("MDS1", "MDS2")
data_plot_all            = rbind(data_plot,data_plot_edge)
data_plot_all$phases     = all_phases
data_plot_all$Vi         = factor(c(rep(1,length(Main_phases)),
rep(0,length(Edge))))
Plot = ggplot() +
geom_point(data=data_plot_all,aes(x=MDS1, y=MDS2,col=all_phases, shape = Vi))+
geom_segment(data=Seg1, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[1],size=1)+
geom_segment(data=Seg2, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[2],size=1)+
geom_segment(data=Seg3, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[3],size=1)+
geom_segment(data=Seg4, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[4],size=1)+
geom_segment(data=Seg5, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[5],size=1)+
geom_segment(data=Seg6, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[6],size=1)+
xlab("Dim 1")+ylab("Dim 2")+labs(color="Z_i", shape="V_i")+
theme_bw()+theme(legend.position = "right", text = element_text(size=20))
# CairoPNG(filename = '../Image/Inference_Scatter_Mice.png', width = 500, height = 400)
Plot
c_clust_data_stable
Edge
if(length(unique(Edge)!=3){
length(unique(Edge))
# Function to plot scatter plot and results of GARP
# To be generalized for different number of edges and vertices
Plot_result_GARP = function(y                   = y,
is_i_stable         = is_i_stable,
clust_VI_stable     = clust_VI_stable,
mu_stable_map       = mu_stable_map,
Map_k_edge          = Map_k_edge,
cl_memb_edge_out    = cl_memb_edge_out
){
c_clust_data_stable = length(clust_VI_stable)
if(c_clust_data_stable!=4){
print("error: adapt the code for a different number of vertices")
stop()
}
K_T_max                = c_clust_data_stable*(c_clust_data_stable-1)/2
data_plot              = data.frame(y[is_i_stable,])
data_plot_edge         = data.frame(y[!is_i_stable,])
Segment_data           = matrix(nrow=K_T_max,ncol=4)
colnames(Segment_data) = c("x","y","xend","yend")
for(ind in 1:K_T_max){
Segment_data[ind,] = c(mu_stable_map[Map_k_edge[ind,1],1],
mu_stable_map[Map_k_edge[ind,1],2],
mu_stable_map[Map_k_edge[ind,2],1],
mu_stable_map[Map_k_edge[ind,2],2])
}
Seg1 = data.frame(t(Segment_data[1,]))
Seg2 = data.frame(t(Segment_data[2,]))
Seg3 = data.frame(t(Segment_data[3,]))
Seg4 = data.frame(t(Segment_data[4,]))
Seg5 = data.frame(t(Segment_data[5,]))
Seg6 = data.frame(t(Segment_data[6,]))
Alpha = table(cl_memb_edge_out[seq_thin,])
Alpha = Alpha/max(Alpha)*100
Main_phases         = factor(clust_VI_stable)
Edge                = factor(apply(cl_memb_edge_out[seq_thin,],2,Mode))
levels(Main_phases)  = c("1", "2", "3", "4")
if(length(unique(Edge))!=3){
print("error: adapt the code for a different number of edges")
stop()
}
levels(Edge)  = c("(1,2)", "(2,3)", "(3,4)")
all_phases               = c(Main_phases, Edge)
colnames(data_plot_edge) = c("MDS1", "MDS2")
data_plot_all            = rbind(data_plot,data_plot_edge)
data_plot_all$phases     = all_phases
data_plot_all$Vi         = factor(c(rep(1,length(Main_phases)),
rep(0,length(Edge))))
Plot = ggplot() +
geom_point(data=data_plot_all,aes(x=MDS1, y=MDS2,col=all_phases, shape=Vi))+
geom_segment(data=Seg1, mapping =aes(x= x, y = y, xend=xend, yend=yend),
col="black",alpha=Alpha[1],size=1)+
geom_segment(data=Seg2, mapping=aes(x=x, y=y, xend=xend,yend=yend),
col="black",alpha=Alpha[2], size=1)+
geom_segment(data=Seg3, mapping=aes(x=x, y=y, xend=xend, yend=yend),
col="black",alpha=Alpha[3], size=1)+
geom_segment(data=Seg4, mapping=aes(x=x, y=y, xend=xend, yend=yend),
col="black",alpha=Alpha[4], size=1)+
geom_segment(data=Seg5, mapping=aes(x=x, y=y, xend=xend, yend=yend),
col="black", alpha=Alpha[5], size=1)+
geom_segment(data=Seg6, mapping=aes(x=x, y=y, xend=xend, yend=yend),
col="black", alpha=Alpha[6], size=1)+
xlab("Dim 1")+ylab("Dim 2")+labs(color="Z_i", shape="V_i")+
theme_bw()+theme(legend.position = "right", text = element_text(size=20))
}
Plot_2a = Plot_result_GARP(y                   = y,
is_i_stable         = is_i_stable,
clust_VI_stable     = clust_VI_stable,
mu_stable_map       = mu_stable_map,
Map_k_edge          = Map_k_edge,
cl_memb_edge_out    = cl_memb_edge_out
)
source("C:/Users/39339/Dropbox/GitHub/GARP/GARP_main.R", echo=TRUE)
source("C:/Users/39339/Dropbox/GitHub/GARP/GARP_main.R", echo=TRUE)
invisible(dev.off())
invisible(dev.off())
# Find markers  ----------------------------------------------------------------
# load data before dimensionality reduction
load("../Data/Mice_original_data.rda")
