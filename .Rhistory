Niter   = Niter,
Plot    = TRUE,
acc_p   = FALSE)
save(output_sim_3, file="./Data-and-Results/output_sim_2.RData")
} else {
load("./Data-and-Results/output_sim_2.RData")
}
# Set the seed for reproducibility
set.seed(123)
output_sim_3 = GARP_MCMC(data    = data_sim,
mu0     = mu0,
kappa0  = kappa0,
nu0     = nu0,
Lambda0 = Lambda0,
p_s     = p_s,
Niter   = Niter,
Plot    = TRUE,
acc_p   = FALSE)
P = ncol(y)
N = nrow(y)
# If you want to save the plot
Save_Plot = F
# Run the MCMC -----------------------------------------------------------------
# GARP hyperparameters
# Random partition parameters
p_s       = 0.5 # change to p_v
gamma_GN  = 0.5
alpha_Dir = 0.5
## NIG hyperparameters
mu0       = colMeans(y)
kappa0    = 0.001
nu0       = 100
Lambda0   = diag(rep(150,P))
# MCMC quantities
Niter     = 100
run_MCMC  = T
# Set the seed for reproducibility
set.seed(123)
output_sim_3 = GARP_MCMC(data    = data_sim,
mu0     = mu0,
kappa0  = kappa0,
nu0     = nu0,
Lambda0 = Lambda0,
p_s     = p_s,
Niter   = Niter,
Plot    = TRUE,
acc_p   = FALSE)
Lambda0   = diag(rep(150,P))
P = ncol(y)
Lambda0   = diag(rep(150,P))
P=2
# Set the seed for reproducibility
set.seed(123)
output_sim_2_edge = GARP_Edge(y                   = y,
is_i_stable         = is_i_stable,
c_clust_data_stable = c_clust_data_stable,
kappa0              = kappa0,
nu0                 = nu0,
Lambda0             = Lambda0,
Niter               = Niter,
Plot                = TRUE)
## Sim 3
# Run the MCMC sim 3------------------------------------------------------------
set.seed(123)
edg_1_mean = c(0,7)
edg_2_mean = c(6,-3)
edg_3_mean = c(5,3)
edg_4_mean = c(-5,-4)
edg_5_mean = c(-4,2)
edg_1_var = diag(rep(1,2))/4
edg_2_var = diag(rep(1,2))/4
edg_3_var = diag(rep(1,2))/4
edg_4_var = diag(rep(1,2))/4
edg_5_var = diag(rep(1,2))/4
n_s = 200
data_sim_edg_1 = mvrnorm(n=n_s, edg_1_mean, edg_1_var)
data_sim_edg_2 = mvrnorm(n=n_s, edg_2_mean, edg_2_var)
data_sim_edg_3 = mvrnorm(n=n_s, edg_3_mean, edg_3_var)
data_sim_edg_4 = mvrnorm(n_s, edg_4_mean, edg_4_var)
data_sim_edg_5 = mvrnorm(n=n_s, edg_5_mean, edg_5_var)
data_sim = rbind(data_sim_edg_1, data_sim_edg_2, data_sim_edg_3,
data_sim_edg_4, data_sim_edg_5)
xlim_sim_data = c(min(data_sim[,1]), max(data_sim[,1]))
ylim_sim_data = c(min(data_sim[,2]), max(data_sim[,2]))
xylim_sim     = c(min(xlim_sim_data, ylim_sim_data),
max(xlim_sim_data, ylim_sim_data))
data_plot           = data.frame(data_sim)
Plot_extra4 = ggplot() + geom_point(data=data_plot, aes(x=X1, y=X2)) +
labs(color="Vertex") + theme_bw() + xlab("Dim 1") + ylab("Dim 2") +
theme(legend.position = "right", text = element_text(size=20))
Plot_extra4
# Set the seed for reproducibility
set.seed(123)
output_sim_3 = GARP_MCMC(data    = data_sim,
mu0     = mu0,
kappa0  = kappa0,
nu0     = nu0,
Lambda0 = Lambda0,
p_s     = p_s,
Niter   = Niter,
Plot    = TRUE,
acc_p   = FALSE)
Lambda0   = diag(rep(150,P))
## Sim 2
# Run the MCMC sim 2------------------------------------------------------------
set.seed(123)
ver_1_mean = c(0,7)
ver_2_mean = c(6,-3)
ver_3_mean = c(5,3)
ver_4_mean = c(-5,-4)
ver_5_mean = c(-4,2)
ver_1_var = diag(rep(1,2))/2
ver_2_var = diag(rep(1,2))/2
ver_3_var = diag(rep(1,2))/2
ver_4_var = diag(rep(1,2))/2
ver_5_var = diag(rep(1,2))/2
n_s = 200
n_e = 100
data_sim_ver_1 = mvrnorm(n=n_s, ver_1_mean,
ver_1_var)
## Sim 3
# Run the MCMC sim 3------------------------------------------------------------
set.seed(123)
edg_1_mean = c(0,7)
edg_2_mean = c(6,-3)
edg_3_mean = c(5,3)
edg_4_mean = c(-5,-4)
edg_5_mean = c(-4,2)
edg_1_var = diag(rep(1,2))/4
edg_2_var = diag(rep(1,2))/4
edg_3_var = diag(rep(1,2))/4
edg_4_var = diag(rep(1,2))/4
edg_5_var = diag(rep(1,2))/4
n_s = 200
data_sim_edg_1 = mvrnorm(n=n_s, edg_1_mean, edg_1_var)
data_sim_edg_2 = mvrnorm(n=n_s, edg_2_mean, edg_2_var)
data_sim_edg_3 = mvrnorm(n=n_s, edg_3_mean, edg_3_var)
data_sim_edg_4 = mvrnorm(n_s, edg_4_mean, edg_4_var)
data_sim_edg_5 = mvrnorm(n=n_s, edg_5_mean, edg_5_var)
data_sim = rbind(data_sim_edg_1, data_sim_edg_2, data_sim_edg_3,
data_sim_edg_4, data_sim_edg_5)
xlim_sim_data = c(min(data_sim[,1]), max(data_sim[,1]))
ylim_sim_data = c(min(data_sim[,2]), max(data_sim[,2]))
xylim_sim     = c(min(xlim_sim_data, ylim_sim_data),
max(xlim_sim_data, ylim_sim_data))
data_plot           = data.frame(data_sim)
Plot_extra4 = ggplot() + geom_point(data=data_plot, aes(x=X1, y=X2)) +
labs(color="Vertex") + theme_bw() + xlab("Dim 1") + ylab("Dim 2") +
theme(legend.position = "right", text = element_text(size=20))
Plot_extra4
if(run_MCMC){
# Set the seed for reproducibility
set.seed(123)
output_sim_3 = GARP_MCMC(data    = data_sim,
mu0     = mu0,
kappa0  = kappa0,
nu0     = nu0,
Lambda0 = Lambda0,
p_s     = p_s,
Niter   = Niter,
Plot    = TRUE,
acc_p   = FALSE)
save(output_sim_3, file="./Data-and-Results/output_sim_2.RData")
} else {
load("./Data-and-Results/output_sim_2.RData")
}
mu0
# Run the MCMC -----------------------------------------------------------------
# GARP hyperparameters
# Random partition parameters
p_s       = 0.5 # change to p_v
gamma_GN  = 0.5
alpha_Dir = 0.5
## NIG hyperparameters
mu0       = colMeans(y)
kappa0    = 0.001
nu0       = 100
Lambda0   = diag(rep(150,P))
# MCMC quantities
Niter     = 100
run_MCMC  = T
## Sim 3
# Run the MCMC sim 3------------------------------------------------------------
set.seed(123)
edg_1_mean = c(0,7)
edg_2_mean = c(6,-3)
edg_3_mean = c(5,3)
edg_4_mean = c(-5,-4)
edg_5_mean = c(-4,2)
edg_1_var = diag(rep(1,2))/4
edg_2_var = diag(rep(1,2))/4
edg_3_var = diag(rep(1,2))/4
edg_4_var = diag(rep(1,2))/4
edg_5_var = diag(rep(1,2))/4
n_s = 200
data_sim_edg_1 = mvrnorm(n=n_s, edg_1_mean, edg_1_var)
data_sim_edg_2 = mvrnorm(n=n_s, edg_2_mean, edg_2_var)
data_sim_edg_3 = mvrnorm(n=n_s, edg_3_mean, edg_3_var)
data_sim_edg_4 = mvrnorm(n_s, edg_4_mean, edg_4_var)
## Sim 3
# Run the MCMC sim 3------------------------------------------------------------
set.seed(123)
ver_1_mean = c(0,7)
ver_2_mean = c(6,-3)
ver_3_mean = c(5,3)
ver_4_mean = c(-5,-4)
ver_5_mean = c(-4,2)
ver_1_var = diag(rep(1,2))/4
ver_2_var = diag(rep(1,2))/4
ver_3_var = diag(rep(1,2))/4
ver_4_var = diag(rep(1,2))/4
ver_5_var = diag(rep(1,2))/4
n_s = 200
data_sim_ver_1 = mvrnorm(n=n_s, ver_1_mean, ver_1_var)
data_sim_ver_2 = mvrnorm(n=n_s, ver_2_mean, ver_2_var)
data_sim_ver_3 = mvrnorm(n=n_s, ver_3_mean, ver_3_var)
data_sim_ver_4 = mvrnorm(n_s, ver_4_mean, ver_4_var)
data_sim_ver_5 = mvrnorm(n=n_s, ver_5_mean, ver_5_var)
data_sim = rbind(data_sim_ver_1, data_sim_ver_2, data_sim_ver_3,
data_sim_ver_4, data_sim_ver_5)
xlim_sim_data = c(min(data_sim[,1]), max(data_sim[,1]))
ylim_sim_data = c(min(data_sim[,2]), max(data_sim[,2]))
xylim_sim     = c(min(xlim_sim_data, ylim_sim_data),
max(xlim_sim_data, ylim_sim_data))
data_plot           = data.frame(data_sim)
Plot_extra4 = ggplot() + geom_point(data=data_plot, aes(x=X1, y=X2)) +
labs(color="Vertex") + theme_bw() + xlab("Dim 1") + ylab("Dim 2") +
theme(legend.position = "right", text = element_text(size=20))
Plot_extra4
if(run_MCMC){
# Set the seed for reproducibility
set.seed(123)
output_sim_3 = GARP_MCMC(data    = data_sim,
mu0     = mu0,
kappa0  = kappa0,
nu0     = nu0,
Lambda0 = Lambda0,
p_s     = p_s,
Niter   = Niter,
Plot    = TRUE,
acc_p   = FALSE)
save(output_sim_3, file="./Data-and-Results/output_sim_2.RData")
} else {
load("./Data-and-Results/output_sim_2.RData")
}
# Run the MCMC -----------------------------------------------------------------
# GARP hyperparameters
# Random partition parameters
p_s       = 0.5 # change to p_v
gamma_GN  = 0.5
alpha_Dir = 0.5
## NIG hyperparameters
mu0       = colMeans(y)
kappa0    = 0.001
nu0       = 100
Lambda0   = diag(rep(150,P))
# MCMC quantities
Niter     = 100
run_MCMC  = T
## Sim 3
# Run the MCMC sim 3------------------------------------------------------------
set.seed(123)
ver_1_mean = c(0,7)
ver_2_mean = c(6,-3)
ver_3_mean = c(5,3)
ver_4_mean = c(-5,-4)
ver_5_mean = c(-4,2)
ver_1_var = diag(rep(1,2))/4
ver_2_var = diag(rep(1,2))/4
ver_3_var = diag(rep(1,2))/4
ver_4_var = diag(rep(1,2))/4
ver_5_var = diag(rep(1,2))/4
n_s = 200
data_sim_ver_1 = mvrnorm(n=n_s, ver_1_mean, ver_1_var)
data_sim_ver_2 = mvrnorm(n=n_s, ver_2_mean, ver_2_var)
data_sim_ver_3 = mvrnorm(n=n_s, ver_3_mean, ver_3_var)
data_sim_ver_4 = mvrnorm(n_s, ver_4_mean, ver_4_var)
data_sim_ver_5 = mvrnorm(n=n_s, ver_5_mean, ver_5_var)
data_sim = rbind(data_sim_ver_1, data_sim_ver_2, data_sim_ver_3,
data_sim_ver_4, data_sim_ver_5)
xlim_sim_data = c(min(data_sim[,1]), max(data_sim[,1]))
ylim_sim_data = c(min(data_sim[,2]), max(data_sim[,2]))
xylim_sim     = c(min(xlim_sim_data, ylim_sim_data),
max(xlim_sim_data, ylim_sim_data))
data_plot           = data.frame(data_sim)
Plot_extra4 = ggplot() + geom_point(data=data_plot, aes(x=X1, y=X2)) +
labs(color="Vertex") + theme_bw() + xlab("Dim 1") + ylab("Dim 2") +
theme(legend.position = "right", text = element_text(size=20))
Plot_extra4
if(run_MCMC){
# Set the seed for reproducibility
set.seed(123)
output_sim_3 = GARP_MCMC(data    = data_sim,
mu0     = mu0,
kappa0  = kappa0,
nu0     = nu0,
Lambda0 = Lambda0,
p_s     = p_s,
Niter   = Niter,
Plot    = TRUE,
acc_p   = FALSE)
save(output_sim_3, file="./Data-and-Results/output_sim_2.RData")
} else {
load("./Data-and-Results/output_sim_2.RData")
}
mu0
if(run_MCMC){
mu0       = colMeans(data_sim)
# Set the seed for reproducibility
set.seed(123)
output_sim_2 = GARP_MCMC(data    = data_sim,
mu0     = mu0,
kappa0  = kappa0,
nu0     = nu0,
Lambda0 = Lambda0,
p_s     = p_s,
Niter   = Niter,
Plot    = TRUE,
acc_p   = FALSE)
save(output_sim_2, file="./Data-and-Results/output_sim_2.RData")
} else {
load("./Data-and-Results/output_sim_2.RData")
}
## Sim 3
# Run the MCMC sim 3------------------------------------------------------------
set.seed(123)
ver_1_mean = c(0,7)
ver_2_mean = c(6,-3)
ver_3_mean = c(5,3)
ver_4_mean = c(-5,-4)
ver_5_mean = c(-4,2)
ver_1_var = diag(rep(1,2))/4
ver_2_var = diag(rep(1,2))/4
ver_3_var = diag(rep(1,2))/4
ver_4_var = diag(rep(1,2))/4
ver_5_var = diag(rep(1,2))/4
n_s = 200
data_sim_ver_1 = mvrnorm(n=n_s, ver_1_mean, ver_1_var)
data_sim_ver_2 = mvrnorm(n=n_s, ver_2_mean, ver_2_var)
data_sim_ver_3 = mvrnorm(n=n_s, ver_3_mean, ver_3_var)
data_sim_ver_4 = mvrnorm(n_s, ver_4_mean, ver_4_var)
data_sim_ver_5 = mvrnorm(n=n_s, ver_5_mean, ver_5_var)
data_sim = rbind(data_sim_ver_1, data_sim_ver_2, data_sim_ver_3,
data_sim_ver_4, data_sim_ver_5)
xlim_sim_data = c(min(data_sim[,1]), max(data_sim[,1]))
ylim_sim_data = c(min(data_sim[,2]), max(data_sim[,2]))
xylim_sim     = c(min(xlim_sim_data, ylim_sim_data),
max(xlim_sim_data, ylim_sim_data))
data_plot           = data.frame(data_sim)
Plot_extra4 = ggplot() + geom_point(data=data_plot, aes(x=X1, y=X2)) +
labs(color="Vertex") + theme_bw() + xlab("Dim 1") + ylab("Dim 2") +
theme(legend.position = "right", text = element_text(size=20))
Plot_extra4
if(run_MCMC){
mu0       = colMeans(data_sim)
# Set the seed for reproducibility
set.seed(123)
output_sim_3 = GARP_MCMC(data    = data_sim,
mu0     = mu0,
kappa0  = kappa0,
nu0     = nu0,
Lambda0 = Lambda0,
p_s     = p_s,
Niter   = Niter,
Plot    = TRUE,
acc_p   = FALSE)
save(output_sim_3, file="./Data-and-Results/output_sim_2.RData")
} else {
load("./Data-and-Results/output_sim_2.RData")
}
attach(output_sim_3)
# Assign cells to vertex/edge phases
p_s_i        = colMeans(stable_out[seq_thin,])
is_i_stable  = (p_s_i>0.5)
(N_S_map     = sum(is_i_stable))
(N_T_map     = N-N_S_map)
# Point estimate vertex-clustering
clust_VI_stable       = salso(cl_memb_all_out[seq_thin,is_i_stable], loss=VI())
uni_clust_data_stable = unique(clust_VI_stable)
# Number of vertex clusters
c_clust_data_stable       = length(uni_clust_data_stable)
# Frequencies of vertex clusters
freq_clust_VI_stable      = double(c_clust_data_stable)
for (i in 1:c_clust_data_stable){
uni_clust_stable        = uni_clust_data_stable[i]
freq_clust_VI_stable[i] = sum(clust_VI_stable==uni_clust_stable)
}
freq_clust_VI_stable
attach(output_sim_3)
# Assign cells to vertex/edge phases
p_s_i        = colMeans(stable_out[seq_thin,])
# Thinning
thin         = 2
burn.in      = Niter/2
seq_thin     = seq(from=burn.in, to=Niter, by=thin)
Niter_ps     = length(seq_thin)
# Assign cells to vertex/edge phases
p_s_i        = colMeans(stable_out[seq_thin,])
is_i_stable  = (p_s_i>0.5)
(N_S_map     = sum(is_i_stable))
(N_T_map     = N-N_S_map)
N        = nrow(data_sim)
xlim_sim_data = c(min(data_sim[,1]), max(data_sim[,1]))
ylim_sim_data = c(min(data_sim[,2]), max(data_sim[,2]))
xylim_sim     = c(min(xlim_sim_data, ylim_sim_data),
max(xlim_sim_data, ylim_sim_data))
data_plot           = data.frame(data_sim)
Plot_extra4 = ggplot() + geom_point(data=data_plot, aes(x=X1, y=X2)) +
labs(color="Vertex") + theme_bw() + xlab("Dim 1") + ylab("Dim 2") +
theme(legend.position = "right", text = element_text(size=20))
Plot_extra4
if(run_MCMC){
mu0       = colMeans(data_sim)
# Set the seed for reproducibility
set.seed(123)
output_sim_3 = GARP_MCMC(data    = data_sim,
mu0     = mu0,
kappa0  = kappa0,
nu0     = nu0,
Lambda0 = Lambda0,
p_s     = p_s,
Niter   = Niter,
Plot    = TRUE,
acc_p   = FALSE)
save(output_sim_3, file="./Data-and-Results/output_sim_2.RData")
} else {
load("./Data-and-Results/output_sim_2.RData")
}
attach(output_sim_3)
# Assign cells to vertex/edge phases
p_s_i        = colMeans(stable_out[seq_thin,])
is_i_stable  = (p_s_i>0.5)
(N_S_map     = sum(is_i_stable))
(N_T_map     = N-N_S_map)
# Point estimate vertex-clustering
clust_VI_stable       = salso(cl_memb_all_out[seq_thin,is_i_stable], loss=VI())
uni_clust_data_stable = unique(clust_VI_stable)
# Number of vertex clusters
c_clust_data_stable       = length(uni_clust_data_stable)
# Frequencies of vertex clusters
freq_clust_VI_stable      = double(c_clust_data_stable)
for (i in 1:c_clust_data_stable){
uni_clust_stable        = uni_clust_data_stable[i]
freq_clust_VI_stable[i] = sum(clust_VI_stable==uni_clust_stable)
}
freq_clust_VI_stable
# Compute probability of co-clustering of cells assigned to vertices
dissimlar_stable = psm(cl_memb_all_out[seq_thin,is_i_stable])
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure S.5 b in the supplementary)
Plot_S5b = Plot_heat_vertex(dissimlar_stable = dissimlar_stable,
N_S_map          = N_S_map)
if(Save_Plot){
CairoPNG(filename = './Image/Prob_Coclus_obs_Sim_Data_rev2.png',
width = 500, height = 400)}
Plot_S5b
if(Save_Plot){invisible(dev.off())}
N_T_map
if(N_T_map>0){
# Edge assignments
if(run_MCMC){
# Set the seed for reproducibility
set.seed(123)
output_sim_3_edge = GARP_Edge(y                   = data_sim,
is_i_stable         = is_i_stable,
c_clust_data_stable = c_clust_data_stable,
kappa0              = kappa0,
nu0                 = nu0,
Lambda0             = Lambda0,
Niter               = Niter,
Plot                = TRUE)
save(output_sim_3_edge, file="./Data-and-Results/output_sim_3_edge.RData")
} else {
load("./Data-and-Results/output_sim_3_edge.RData")
}
attach(output_sim_3_edge)
}
Plot_S5a = Plot_result_GARP_sim(y                   = y,
is_i_stable         = is_i_stable,
clust_VI_stable     = clust_VI_stable,
mu_stable_map       = mu_stable_map,
Map_k_edge          = Map_k_edge,
cl_memb_edge_out    = cl_memb_edge_out)
if(Save_Plot){CairoPNG(filename = './Image/Inference_Scatter_Sim.png',
width = 500, height = 400)}
Plot_S5a
if(Save_Plot){invisible(dev.off())}
Plot_S5a
Plot_S5a = Plot_result_GARP_sim(y                   = y,
is_i_stable         = is_i_stable,
clust_VI_stable     = clust_VI_stable,
mu_stable_map       = mu_stable_map,
Map_k_edge          = Map_k_edge,
cl_memb_edge_out    = cl_memb_edge_out)
Plot_S5a = Plot_result_GARP_sim(y                   = dat_sim,
is_i_stable         = is_i_stable,
clust_VI_stable     = clust_VI_stable,
mu_stable_map       = mu_stable_map,
Map_k_edge          = Map_k_edge,
cl_memb_edge_out    = cl_memb_edge_out)
Plot_S5a = Plot_result_GARP_sim(y                   = data_sim,
is_i_stable         = is_i_stable,
clust_VI_stable     = clust_VI_stable,
mu_stable_map       = mu_stable_map,
Map_k_edge          = Map_k_edge,
cl_memb_edge_out    = cl_memb_edge_out)
Plot_S5a
Plot_S2
1e5
10000
10000==1e5
10000==1e4
