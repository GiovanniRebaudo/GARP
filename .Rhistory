labels = floor(seq(1,N_S_map,length.out = 9))) +
xlab("observation")+ylab("observation")+
scale_fill_gradientn(colours = c("white", "yellow", "red"),
values = rescale(c(0,0.25,1)), space = "Lab", name="")+
theme(legend.position = "right", text = element_text(size=20))
# Codes accompanying "Graph-Aligned Random Partition Model (GARP)"
# Load relevant libraries, functions and data ----------------------------------
rm(list=ls())
# Set the working directory to the current folder
# Code to set the working directory to the current folder from RStudio
library(rstudioapi) # version 0.14
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(MASS)    # version 7.3-58.2
library(ggplot2) # version 3.4.2
theme_set(theme_bw(base_size = 14))
library(viridis) # version 0.6.2
library(salso)   # version 0.3.29
library(reshape) # version 0.8.9
library(Cairo)   # version 1.6-0
library(scales)  # version 1.2.1
# Set seed for reproducibility
set.seed(123)
# Load functions
source("GARP_fcts.R")
# Load data
y = get(load("Data.RData"))
P = ncol(y)
N = nrow(y)
# Data scatter plot (Figure 1 in the main manuscript)
Plot_1 = pre_plot(y)
Plot_1
# Gaussian edge contour plot (Figure S.1 in the supplementary materials)
Plot_S1 = edge_countorplot(vertices = rbind(c(-2,-2), c(3,3)),
data.grid =expand.grid(X = seq(-3, 4, length.out=800),
Y = seq(-3, 4, length.out=800)))
Plot_S1
set.seed(123)
# Run the MCMC ------------------------------------------------------------
# GARP hyperparameters
# Random partition parameters
p_s       = 0.5 # change to p_v
gamma_GN  = 0.5
alpha_Dir = 0.5
## NIG hyperparameters
mu0       = colMeans(y)
kappa0    = 0.001
nu0       = 100
Lambda0   = diag(rep(15,P))
# MCMC quantities
Niter     = 10000
run_MCMC  = FALSE
if(run_MCMC){
#  pt1 = proc.time() compute time
output = GARP_MCMC(data    = data,
mu0     = mu0,
kappa0  = kappa0,
nu0     = nu0,
Lambda0 = Lambda0,
p_s     = p_s,
Niter   = Niter,
all     = TRUE,
Plot    = TRUE,
acc_p   = TRUE)
# pt2 = proc.time()
# pt2-pt1
# save(output, file="output.RData")
} else {
load("output.RData")
}
attach(output)
# Thinning
thin         = 2
burn.in      = Niter/2
seq_thin     = seq(from=burn.in, to=Niter, by=thin)
Niter_ps     = length(seq_thin)
# Assign cells to vertex/edge phases
p_s_i        = colMeans(stable_out[seq_thin,])
is_i_stable  = (p_s_i>0.5)
(N_S_map     = sum(is_i_stable))
(N_T_map     = N-N_S_map)
# Point estimate vertex-clustering
clust_VI_stable       = salso(cl_memb_all_out[seq_thin,is_i_stable], loss=VI())
uni_clust_data_stable = unique(clust_VI_stable)
# Number of vertex clusters
c_clust_data_stable       = length(uni_clust_data_stable)
# Frequencies of vertex clusters
freq_clust_VI_stable      = double(c_clust_data_stable)
for (i in 1:c_clust_data_stable){
uni_clust_stable        = uni_clust_data_stable[i]
freq_clust_VI_stable[i] = sum(clust_VI_stable==uni_clust_stable)
}
freq_clust_VI_stable
# Compute probability of co-clustering of cells assigned to vertices
dissimlar_stable = psm(cl_memb_all_out[seq_thin,is_i_stable])
# Posterior probabilities of	co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
dismat      = round(dissimlar_stable,2)
dismat      = reorder_dismat(dismat,groups=rep(1,N_S_map))
plot_dismat = melt(dismat)
Plot2b = ggplot(data=plot_dismat, aes(x=factor(X1), y=factor(X2), fill=value))+
geom_tile()+ theme_bw()+
scale_y_discrete(breaks = floor(seq(1,N_S_map,length.out = 9)),
labels = floor(seq(1,N_S_map,length.out = 9))) +
scale_x_discrete(breaks = floor(seq(1,N_S_map,length.out = 9)),
labels = floor(seq(1,N_S_map,length.out = 9))) +
xlab("observation")+ylab("observation")+
scale_fill_gradientn(colours = c("white", "yellow", "red"),
values = rescale(c(0,0.25,1)), space = "Lab", name="")+
theme(legend.position = "right", text = element_text(size=20))
Plot2b
# Posterior probabilities of	co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
dismat      = round(dissimlar_stable,2)
dismat      = reorder_dismat(dismat,groups=rep(1,N_S_map))
plot_dismat = melt(dismat)
Plot2b = ggplot(data=plot_dismat, aes(x=factor(X1), y=factor(X2), fill=value))+
geom_tile()+ theme_bw()+
scale_y_discrete(breaks = floor(seq(1,N_S_map,length.out = 9)),
labels = floor(seq(1,N_S_map,length.out = 9))) +
scale_x_discrete(breaks = floor(seq(1,N_S_map,length.out = 9)),
labels = floor(seq(1,N_S_map,length.out = 9))) +
xlab("observation")+ylab("observation")+
scale_fill_gradientn(colours = c("white", "yellow", "red"),
values = rescale(c(0,0.25,1)), space = "Lab", name="")+
theme(legend.position = "right", text = element_text(size=20))
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
Plot_2b = Plot_heat_vertex(dissimlar_stable = dissimlar_stable,
N_S_map          = N_S_map)
# CairoPNG(filename = '../Image/Prob_Coclus_obs_Mice_Data_Orange.png',
#          width = 500, height = 400)
Plot2b
Freq_Kv = apply(cl_memb_all_out[seq_thin,],FUN=function(x){max(unique(x))},MARGIN=1)
table(Freq_Kv)
xtable(t(prop.table(table(Freq_Kv))),digits = 3)
cluster_stable_out_mcmc = t(apply(X=cl_memb_all_out[seq_thin,is_i_stable], MARGIN=1, FUN=function(x){as.integer(factor(x))}))
# Clustering
# library(mcclust)
# library("mcclust.ext")
# Compute the dissimilarity matrix between areas on the MCMC labels
dissimlar_stable        = comp.psm(cluster_stable_out_mcmc)
# clust_VI_stable       = minVI(dissimlar_stable)$cl
clust_VI_stable       = salso(cluster_stable_out_mcmc,loss=VI())
uni_clust_data_stable = unique(clust_VI_stable)
c_clust_data_stable   = length(uni_clust_data_stable)
freq_clust_VI_stable  = double(c_clust_data_stable)
for (i in 1:c_clust_data_stable){
uni_clust_stable        = uni_clust_data_stable[i]
freq_clust_VI_stable[i] = sum(clust_VI_stable==uni_clust_stable)
}
freq_clust_VI_stable
VI_obs_cl_stable = as.integer(freq_clust_VI_stable)
library(xtable)
xtable(VI_obs_cl_stable)
if(N_S_map<(N-1)){
# Compute the dissimilarity matrix between areas on the MCMC labels
cluster_edge_out_mcmc = t(apply(X=cl_memb_all_out[seq_thin,!is_i_stable], MARGIN=1, FUN=function(x){as.integer(factor(x))}))
dissimlar_edge        = comp.psm(cluster_edge_out_mcmc)
# Clustering states as in VI
clust_VI_edge       = minVI(dissimlar_edge)$cl
uni_clust_data_edge = unique(clust_VI_edge)
c_clust_data_edge   = length(uni_clust_data_edge)
freq_clust_VI_edge  = double(c_clust_data_edge)
for (i in 1:c_clust_data_edge){
uni_clust_edge        = uni_clust_data_edge[i]
freq_clust_VI_edge[i] = sum(clust_VI_edge==uni_clust_edge)
}
freq_clust_VI_edge
VI_obs_cl_edge = as.integer(freq_clust_VI_edge)
freq_clust_VI_edge
point_K_T = length(freq_clust_VI_edge)
if (point_K_T<2){
edge_col = 1
} else {
edge_col = gray.colors(3)
}
}
points(y[!is_i_stable,], col=1, pch=1)
if(N_S_map<N){
if(N_S_map<(N-1)){
points(y[!is_i_stable,],pch=16,col= 1)#edge_col[clust_VI_edge])
} else {
points(y[!is_i_stable,],col=1,pch=16)
}
}
# Reoerder dissimiliraty matrix rows and columns (observations) intra groups and possibly reorder also the groups (batch of observations)
# INPUT:
# dismat.= original dissimilarity matrix
# groups.= observaed groups (batches of observations) that we want also to reorder
# order.groups.= if we want a fixed order of groups (batches of observations)
# OUTPUT:
# dismat= reorder dissimilarity matrix
reorder_dismat = function(dismat., groups., order.groups.=NULL){
# Use correlation between variables as distance
order.dis   = integer(0)
J           = length(unique(groups.))
if(is.null(order.groups.)){
order.j   = 1:J
} else {
order.j   = order.groups.
}
for (j in order.j){
groups.j  = which(groups.==j)
dd        = as.dist((1-dismat.[groups.j,groups.j])/2)
hc        = hclust(dd)
order.dis = c(order.dis,hc$order+length(order.dis))
}
dismat      = dismat.[order.dis, order.dis]
dismat      = dismat[nrow(dismat):1,]
}
library(ggplot2)
library(scales)
dismat      = round(dissimlar_stable,2)
dismat      = reorder_dismat(dismat,groups=rep(1,N_S_map))
plot_dismat = melt(dismat)
Plot1 = ggplot(data = plot_dismat, aes(x=factor(X1), y=factor(X2), fill=value)) + geom_tile()+ theme_bw()+
#, axis.text.x=element_blank(),axis.text.y=element_blank(), legend.position = "none")+# legend.position="right",legend.direction="vertical")+
scale_y_discrete(breaks = floor(seq(1,N_S_map,length.out = 9)), labels = floor(seq(1,N_S_map,length.out = 9))) +
scale_x_discrete(breaks = floor(seq(1,N_S_map,length.out = 9)), labels = floor(seq(1,N_S_map,length.out = 9))) +
xlab("observation")+ylab("observation")+
scale_fill_gradientn(colours = c("white", "yellow", "red"), values = rescale(c(0,0.25,1)), space = "Lab", name="")+
#  geom_vline(xintercept = 100.5,linetype=2) + geom_hline(yintercept = 100.5,linetype=2)
theme(legend.position = "right", text = element_text(size=20))
CairoPNG(filename = '../Image/Prob_Coclus_obs_Mice_Data_Orange.png', width = 500, height = 400)
Plot1
invisible(dev.off())
# # Likelihood data second method
K_S_VI = length(unique(clust_VI_stable))
K_T_VI = K_S_VI*(K_S_VI-1)/2
data_plot           = data.frame(y[is_i_stable,])
Main_phases         = factor(clust_VI_stable)
levels(Main_phases) = c("V3","V2","V1","V4")
levels(Main_phases) <- paste0("V",1:4)
colnames(data_plot) = c("MDS1","MDS2")
Plot_Stable         = ggplot(data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+ geom_point()+ theme_bw() +
theme(legend.position = "right", text = element_text(size=20))
Plot_Stable
data_plot_edge           = data.frame(y[!is_i_stable,])
colnames(data_plot_edge) = c("MDS1","MDS2")
Plot = ggplot()+ theme_bw() +
labs(color="Vertex")+
geom_point(data=data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+
geom_point(data=data_plot_edge,aes(x=MDS1, y=MDS2), col="black")+
theme(legend.position = "right", text = element_text(size=20))
Plot
str(cl_memb_edge_out)
table(cl_memb_edge_out[seq_thin,])
Segment_data           = matrix(nrow=K_T_max,ncol=4)
colnames(Segment_data) = c("x","y","xend","yend")
for(ind in 1:K_T_max){
Segment_data[ind,] = c(mu_stable_map[Map_k_edge[ind,1],1], mu_stable_map[Map_k_edge[ind,1],2],
mu_stable_map[Map_k_edge[ind,2],1], mu_stable_map[Map_k_edge[ind,2],2])
}
Mu_edge
Seg1 = data.frame(t(Segment_data[1,]))
Seg2 = data.frame(t(Segment_data[2,]))
Seg3 = data.frame(t(Segment_data[3,]))
Seg4 = data.frame(t(Segment_data[4,]))
Seg5 = data.frame(t(Segment_data[5,]))
Seg6 = data.frame(t(Segment_data[6,]))
Alpha = table(cl_memb_edge_out[seq_thin,])
Alpha = Alpha/max(Alpha)*20
cl_memb_edge_out
Alpha = Alpha/max(Alpha)*20
Plot = ggplot() +
geom_point(data=data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+
geom_point(data=data_plot_edge,aes(x=MDS1, y=MDS2), col="black")+
# geom_segment(data=Seg1, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[1],size=1)+
# geom_segment(data=Seg2, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[2],size=1)+
# geom_segment(data=Seg3, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[3],size=1)+
# geom_segment(data=Seg4, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[4],size=1)+
# geom_segment(data=Seg5, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[5],size=1)+
# geom_segment(data=Seg6, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[6],size=1)+
xlab("Dim 1")+ylab("Dim 2")+labs(color="Cluster")+
theme_bw()+theme(legend.position = "right", text = element_text(size=20))
Plot
Plot = ggplot() +
geom_point(data=data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+
# geom_point(data=data_plot_edge,aes(x=MDS1, y=MDS2), col="black")+
geom_segment(data=Seg1, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[1],size=1)+
geom_segment(data=Seg2, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[2],size=1)+
geom_segment(data=Seg3, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[3],size=1)+
geom_segment(data=Seg4, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[4],size=1)+
geom_segment(data=Seg5, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[5],size=1)+
geom_segment(data=Seg6, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[6],size=1)+
xlab("Dim 1")+ylab("Dim 2")+labs(color="Vertex")+
theme_bw()+theme(legend.position = "right", text = element_text(size=20))
Plot
str(cl_memb_edge_out)
table(cl_memb_edge_out[seq_thin,])
Segment_data           = matrix(nrow=K_T_max,ncol=4)
colnames(Segment_data) = c("x","y","xend","yend")
for(ind in 1:K_T_max){
Segment_data[ind,] = c(mu_stable_map[Map_k_edge[ind,1],1], mu_stable_map[Map_k_edge[ind,1],2],
mu_stable_map[Map_k_edge[ind,2],1], mu_stable_map[Map_k_edge[ind,2],2])
}
Mu_edge
Seg1 = data.frame(t(Segment_data[1,]))
Seg2 = data.frame(t(Segment_data[2,]))
Seg3 = data.frame(t(Segment_data[3,]))
Seg4 = data.frame(t(Segment_data[4,]))
Seg5 = data.frame(t(Segment_data[5,]))
Seg6 = data.frame(t(Segment_data[6,]))
data_plot           = data.frame(y[is_i_stable,])
Main_phases         = factor(clust_VI_stable)
levels(Main_phases) = c("V3","V2","V1","V4")
levels(Main_phases) <- paste0("V",1:4)
colnames(data_plot) = c("MDS1","MDS2")
Plot_Stable         = ggplot(data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+ geom_point()+ theme_bw() +
theme(legend.position = "right", text = element_text(size=20))
Plot_Stable
data_plot_edge           = data.frame(y[!is_i_stable,])
colnames(data_plot_edge) = c("MDS1","MDS2")
Plot = ggplot()+ theme_bw() +
labs(color="Vertex")+
geom_point(data=data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+
geom_point(data=data_plot_edge,aes(x=MDS1, y=MDS2), col="black")+
theme(legend.position = "right", text = element_text(size=20))
Plot
str(cl_memb_edge_out)
table(cl_memb_edge_out[seq_thin,])
Segment_data           = matrix(nrow=K_T_max,ncol=4)
colnames(Segment_data) = c("x","y","xend","yend")
for(ind in 1:K_T_max){
Segment_data[ind,] = c(mu_stable_map[Map_k_edge[ind,1],1], mu_stable_map[Map_k_edge[ind,1],2],
mu_stable_map[Map_k_edge[ind,2],1], mu_stable_map[Map_k_edge[ind,2],2])
}
Mu_edge
Seg1 = data.frame(t(Segment_data[1,]))
Seg2 = data.frame(t(Segment_data[2,]))
Seg3 = data.frame(t(Segment_data[3,]))
Seg4 = data.frame(t(Segment_data[4,]))
Seg5 = data.frame(t(Segment_data[5,]))
Seg6 = data.frame(t(Segment_data[6,]))
Alpha = table(cl_memb_edge_out[seq_thin,])
Alpha = Alpha/max(Alpha)*20
Plot = ggplot() +
geom_point(data=data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+
geom_point(data=data_plot_edge,aes(x=MDS1, y=MDS2), col="black")+
# geom_segment(data=Seg1, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[1],size=1)+
# geom_segment(data=Seg2, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[2],size=1)+
# geom_segment(data=Seg3, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[3],size=1)+
# geom_segment(data=Seg4, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[4],size=1)+
# geom_segment(data=Seg5, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[5],size=1)+
# geom_segment(data=Seg6, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[6],size=1)+
xlab("Dim 1")+ylab("Dim 2")+labs(color="Cluster")+
theme_bw()+theme(legend.position = "right", text = element_text(size=20))
Plot
Plot = ggplot() +
geom_point(data=data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+
# geom_point(data=data_plot_edge,aes(x=MDS1, y=MDS2), col="black")+
geom_segment(data=Seg1, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[1],size=1)+
geom_segment(data=Seg2, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[2],size=1)+
geom_segment(data=Seg3, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[3],size=1)+
geom_segment(data=Seg4, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[4],size=1)+
geom_segment(data=Seg5, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[5],size=1)+
geom_segment(data=Seg6, mapping =aes(x = x, y = y, xend = xend, yend = yend),col="black",alpha=Alpha[6],size=1)+
xlab("Dim 1")+ylab("Dim 2")+labs(color="Vertex")+
theme_bw()+theme(legend.position = "right", text = element_text(size=20))
Plot
source("C:/Users/39339/Dropbox/GitHub/GARP/GARP_main.R", echo=TRUE)
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
Plot_2b = Plot_heat_vertex(dissimlar_stable = dissimlar_stable,
N_S_map          = N_S_map)
# CairoPNG(filename = '../Image/Prob_Coclus_obs_Mice_Data_Orange.png',
#          width = 500, height = 400)
Plot2b
# CairoPNG(filename = '../Image/Prob_Coclus_obs_Mice_Data_Orange.png',
#          width = 500, height = 400)
Plot_2b
# Edge assignments
if(run_MCMC){
output_edge = GARP_Edge(y                   = y,
is_i_stable         = is_i_stable,
c_clust_data_stable = c_clust_data_stable,
kappa0              = kappa0,
nu0                 = nu0,
Lambda0             = Lambda0,
Niter               = Niter,
Plot                = TRUE)
# save(output_edge, file="output_edge.RData")
} else {
load("output_edge.RData")
}
attach(output_edge)
data_plot           = data.frame(y[is_i_stable,])
Main_phases         = factor(clust_VI_stable)
levels(Main_phases) = c("V3","V2","V1","V4")
levels(Main_phases) <- paste0("V",1:4)
colnames(data_plot) = c("MDS1","MDS2")
data_plot           = data.frame(y[is_i_stable,])
Main_phases         = factor(clust_VI_stable)
levels(Main_phases) = paste0("V",1:4)
colnames(data_plot) = c("MDS1","MDS2")
Plot_Stable         = ggplot(data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+ geom_point()+ theme_bw() +
theme(legend.position = "right", text = element_text(size=20))
Plot_Stable
data_plot_edge           = data.frame(y[!is_i_stable,])
colnames(data_plot_edge) = c("MDS1","MDS2")
Plot = ggplot()+ theme_bw() +
labs(color="Vertex")+
geom_point(data=data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+
geom_point(data=data_plot_edge,aes(x=MDS1, y=MDS2), col="black")+
theme(legend.position = "right", text = element_text(size=20))
Plot
str(cl_memb_edge_out)
table(cl_memb_edge_out[seq_thin,])
Segment_data           = matrix(nrow=K_T_max,ncol=4)
colnames(Segment_data) = c("x","y","xend","yend")
for(ind in 1:K_T_max){
Segment_data[ind,] = c(mu_stable_map[Map_k_edge[ind,1],1], mu_stable_map[Map_k_edge[ind,1],2],
mu_stable_map[Map_k_edge[ind,2],1], mu_stable_map[Map_k_edge[ind,2],2])
}
Mu_edge
str(cl_memb_edge_out)
table(cl_memb_edge_out[seq_thin,])
data_plot           = data.frame(y[is_i_stable,])
Main_phases         = factor(clust_VI_stable)
levels(Main_phases) = paste0("V",1:c_clust_data_stable)
colnames(data_plot) = c("MDS1","MDS2")
Plot_Stable         = ggplot(data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+
geom_point()+ theme_bw() +
theme(legend.position = "right", text = element_text(size=20))
Plot_Stable
data_plot_edge           = data.frame(y[!is_i_stable,])
colnames(data_plot_edge) = c("MDS1","MDS2")
Plot = ggplot()+ theme_bw() +
labs(color="Vertex")+
geom_point(data=data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+
geom_point(data=data_plot_edge,aes(x=MDS1, y=MDS2), col="black")+
theme(legend.position = "right", text = element_text(size=20))
K_T_max = c_clust_data_stable*(c_clust_data_stable-1)/2
Segment_data           = matrix(nrow=K_T_max,ncol=4)
Segment_data           = matrix(nrow=K_T_max, ncol=c_clust_data_stable)
colnames(Segment_data) = c("x","y","xend","yend")
for(ind in 1:K_T_max){
Segment_data[ind,] = c(mu_stable_map[Map_k_edge[ind,1],1], mu_stable_map[Map_k_edge[ind,1],2],
mu_stable_map[Map_k_edge[ind,2],1], mu_stable_map[Map_k_edge[ind,2],2])
}
mu_stable_map
# Set seed for reproducibility
set.seed(123)
output_edge = GARP_Edge(y                   = y,
is_i_stable         = is_i_stable,
c_clust_data_stable = c_clust_data_stable,
kappa0              = kappa0,
nu0                 = nu0,
Lambda0             = Lambda0,
Niter               = Niter,
Plot                = TRUE)
save(output_edge, file="output_edge.RData")
data_plot           = data.frame(y[is_i_stable,])
Main_phases         = factor(clust_VI_stable)
levels(Main_phases) = paste0("V",1:c_clust_data_stable)
# Edge assignments
if(run_MCMC){
# Set seed for reproducibility
set.seed(123)
output_edge = GARP_Edge(y                   = y,
is_i_stable         = is_i_stable,
c_clust_data_stable = c_clust_data_stable,
kappa0              = kappa0,
nu0                 = nu0,
Lambda0             = Lambda0,
Niter               = Niter,
Plot                = TRUE)
# save(output_edge, file="output_edge.RData")
} else {
load("output_edge.RData")
}
attach(output_edge)
output_edge
str(output_edge)
source("C:/Users/39339/Dropbox/GitHub/GARP/GARP_fcts.R", echo=TRUE)
output_edge = GARP_Edge(y                   = y,
is_i_stable         = is_i_stable,
c_clust_data_stable = c_clust_data_stable,
kappa0              = kappa0,
nu0                 = nu0,
Lambda0             = Lambda0,
Niter               = Niter,
Plot                = TRUE)
save(output_edge, file="output_edge.RData")
save(output_edge, file="output_edge.RData")
attach(output_edge)
data_plot           = data.frame(y[is_i_stable,])
Main_phases         = factor(clust_VI_stable)
levels(Main_phases) = paste0("V",1:c_clust_data_stable)
colnames(data_plot) = c("MDS1","MDS2")
Plot_Stable         = ggplot(data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+
geom_point()+ theme_bw() +
theme(legend.position = "right", text = element_text(size=20))
Plot_Stable
data_plot_edge           = data.frame(y[!is_i_stable,])
colnames(data_plot_edge) = c("MDS1","MDS2")
Plot = ggplot()+ theme_bw() +
labs(color="Vertex")+
geom_point(data=data_plot,aes(x=MDS1, y=MDS2,col=Main_phases))+
geom_point(data=data_plot_edge,aes(x=MDS1, y=MDS2), col="black")+
theme(legend.position = "right", text = element_text(size=20))
K_T_max = c_clust_data_stable*(c_clust_data_stable-1)/2
Segment_data           = matrix(nrow=K_T_max, ncol=c_clust_data_stable)
colnames(Segment_data) = c("x","y","xend","yend")
for(ind in 1:K_T_max){
Segment_data[ind,] = c(mu_stable_map[Map_k_edge[ind,1],1],
mu_stable_map[Map_k_edge[ind,1],2],
mu_stable_map[Map_k_edge[ind,2],1],
mu_stable_map[Map_k_edge[ind,2],2])
}
Mu_edge
Map_k_edge
